{"abstract":[{"text":"Allow “where” clauses to specify that a type is Optional.","type":"text"}],"seeAlsoSections":[{"title":"Swift Type System","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods","doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/NonCopyable"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes"]]},"identifier":{"url":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional","interfaceLanguage":"swift"},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped"]},{"identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional"],"title":"Instance Properties"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"role":"symbol","symbolKind":"protocol","navigatorTitle":[{"text":"IsOptional","kind":"identifier"}],"title":"IsOptional","externalID":"s:13SwiftDevNotes10IsOptionalP","roleHeading":"Protocol","modules":[{"name":"SwiftDevNotes"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsOptional","kind":"identifier"}]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP"],"type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional"],"type":"conformingTypes","kind":"relationships","title":"Conforming Types"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"IsOptional","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s23ExpressibleByNilLiteralP","kind":"typeIdentifier","text":"ExpressibleByNilLiteral"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"code":"Optional","type":"codeVoice"},{"text":" cannot be directly used as a where-constraint but this can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be achieved by conforming it to "},{"type":"codeVoice","code":"IsOptional"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"This protocol also allows “casting” the wrapped value to an optional","type":"text"},{"type":"text","text":" "},{"text":"type so that it can be unwrapped.","type":"text"}]},{"type":"codeListing","code":["public protocol IsOptional: ExpressibleByNilLiteral {","    associatedtype Wrapped","","    \/\/ Get the value as an optional type","    var asOptional: Wrapped? { get }","}","","extension Optional: IsOptional {","    public var asOptional: Wrapped? { self }","}","","protocol Foo {","    associatedtype Bar","","    var value: Bar { get }","    var message: String { get }","}","","extension Foo {","    var message: String { \"NOT OPTIONAL \\(value)\" }","}","","extension Foo where Bar: IsOptional {","    var message: String {","        \/\/ need to cast value to optional type","        if let value = value.asOptional {","            \"IS OPTIONAL \\(value)\"","        } else {","            \"IS OPTIONAL nil\"","        }","    }","}"],"syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftdevnotes\/isoptional"]}],"references":{"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional":{"role":"symbol","title":"IsOptional","navigatorTitle":[{"text":"IsOptional","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IsOptional"}],"url":"\/documentation\/swiftdevnotes\/isoptional","abstract":[{"text":"Allow “where” clauses to specify that a type is Optional.","type":"text"}],"type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/Wrapped":{"role":"symbol","title":"Wrapped","kind":"symbol","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"identifier"}],"url":"\/documentation\/swiftdevnotes\/isoptional\/wrapped","abstract":[],"type":"topic","required":true},"doc://SwiftDevNotes/documentation/SwiftDevNotes/ProtocolWithOptionalMethods":{"title":"ProtocolWithOptionalMethods","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ProtocolWithOptionalMethods"}],"abstract":[{"text":"Optional methods in protocols can be simulated by providing an unconstrained default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementation in an extension."}],"url":"\/documentation\/swiftdevnotes\/protocolwithoptionalmethods","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ProtocolWithOptionalMethods"}],"role":"symbol"},"doc://SwiftDevNotes/documentation/SwiftDevNotes":{"url":"\/documentation\/swiftdevnotes","abstract":[{"text":"An ongoing collection of notes and example code for interesting and obscure features","type":"text"},{"text":" ","type":"text"},{"text":"of the Swift programming language and the SwiftUI framework.","type":"text"}],"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes","title":"SwiftDevNotes","role":"collection","kind":"symbol","type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/Swift/Optional":{"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional","title":"Optional","type":"topic","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"text":"Optional","kind":"identifier","preciseIdentifier":"s:Sq"}],"url":"\/documentation\/swiftdevnotes\/swift\/optional","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"abstract":[],"role":"symbol","kind":"symbol"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/NonCopyable":{"navigatorTitle":[{"kind":"identifier","text":"NonCopyable"}],"url":"\/documentation\/swiftdevnotes\/noncopyable","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NonCopyable"}],"abstract":[{"text":"See ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md","isActive":true}],"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/NonCopyable","role":"symbol","title":"NonCopyable","kind":"symbol","type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/asOptional":{"role":"symbol","title":"asOptional","kind":"symbol","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"asOptional","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SwiftDevNotes10IsOptionalP7WrappedQa","text":"Wrapped","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/swiftdevnotes\/isoptional\/asoptional","abstract":[{"text":"Get the value as an optional type","type":"text"}],"type":"topic","required":true},"doc://SwiftDevNotes/s23ExpressibleByNilLiteralP":{"title":"Swift.ExpressibleByNilLiteral","type":"unresolvable","identifier":"doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP"},"https://github.com/apple/swift-evolution/blob/main/proposals/0390-noncopyable-structs-and-enums.md":{"type":"link","titleInlineContent":[{"type":"text","text":"0390-noncopyable-structs-and-enums"}],"url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md","title":"0390-noncopyable-structs-and-enums"}}}