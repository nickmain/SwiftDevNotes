{"relationshipsSections":[{"identifiers":["doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP"],"title":"Inherits From","kind":"relationships","type":"inheritsFrom"},{"title":"Conforming Types","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional"],"type":"conformingTypes","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsOptional"},{"text":" : ","kind":"text"},{"text":"ExpressibleByNilLiteral","preciseIdentifier":"s:s23ExpressibleByNilLiteralP","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"code":"Optional","type":"codeVoice"},{"type":"text","text":" cannot be directly used as a where-constraint but it can"},{"type":"text","text":" "},{"type":"text","text":"be achieved by conforming it to "},{"type":"codeVoice","code":"IsOptional"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"This protocol also allows “casting” the wrapped value to an optional"},{"text":" ","type":"text"},{"text":"type so that it can be unwrapped.","type":"text"}],"type":"paragraph"},{"code":["public protocol IsOptional: ExpressibleByNilLiteral {","    associatedtype Wrapped","","    \/\/ Get the value as an optional type","    var asOptional: Wrapped? { get }","}","","extension Optional: IsOptional {","    public var asOptional: Wrapped? { self }","}","","protocol Foo {","    associatedtype Bar","","    var value: Bar { get }","    var message: String { get }","}","","extension Foo {","    var message: String { \"NOT OPTIONAL \\(value)\" }","}","","extension Foo where Bar: IsOptional {","    var message: String {","        \/\/ need to cast value to optional type","        if let value = value.asOptional {","            \"IS OPTIONAL \\(value)\"","        } else {","            \"IS OPTIONAL nil\"","        }","    }","}"],"syntax":"swift","type":"codeListing"}]}],"seeAlsoSections":[{"title":"Swift Type System","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods"],"generated":true}],"variants":[{"paths":["\/documentation\/swiftdevnotes\/isoptional"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"symbolKind":"protocol","roleHeading":"Protocol","modules":[{"name":"SwiftDevNotes"}],"title":"IsOptional","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"IsOptional","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IsOptional"}],"role":"symbol","externalID":"s:13SwiftDevNotes10IsOptionalP"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes"]]},"identifier":{"url":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Allow “where” clauses to specify that a type is Optional."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped"],"title":"Associated Types"},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional"]}],"references":{"doc://SwiftDevNotes/documentation/SwiftDevNotes/Swift/Optional":{"navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/swiftdevnotes\/swift\/optional","abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional","role":"symbol","title":"Optional","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Sq","text":"Optional","kind":"identifier"}]},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/asOptional":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asOptional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:13SwiftDevNotes10IsOptionalP7WrappedQa","text":"Wrapped"},{"kind":"text","text":"?"}],"type":"topic","abstract":[{"text":"Get the value as an optional type","type":"text"}],"required":true,"title":"asOptional","url":"\/documentation\/swiftdevnotes\/isoptional\/asoptional","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional","role":"symbol","kind":"symbol"},"doc://SwiftDevNotes/s23ExpressibleByNilLiteralP":{"type":"unresolvable","identifier":"doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP","title":"Swift.ExpressibleByNilLiteral"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/ProtocolWithOptionalMethods":{"type":"topic","title":"ProtocolWithOptionalMethods","abstract":[{"type":"text","text":"Optional methods in protocols can be simulated by providing an unconstrained default"},{"text":" ","type":"text"},{"type":"text","text":"implementation in an extension."}],"url":"\/documentation\/swiftdevnotes\/protocolwithoptionalmethods","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ProtocolWithOptionalMethods","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ProtocolWithOptionalMethods"}]},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional":{"type":"topic","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional","url":"\/documentation\/swiftdevnotes\/isoptional","abstract":[{"text":"Allow “where” clauses to specify that a type is Optional.","type":"text"}],"kind":"symbol","title":"IsOptional","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"IsOptional","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IsOptional"}]},"doc://SwiftDevNotes/documentation/SwiftDevNotes":{"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes","url":"\/documentation\/swiftdevnotes","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"An ongoing collection of notes and example code for interesting and obscure features"},{"text":" ","type":"text"},{"text":"of the Swift programming language and the SwiftUI framework.","type":"text"}],"title":"SwiftDevNotes","role":"collection"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/Wrapped":{"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped","abstract":[],"required":true,"url":"\/documentation\/swiftdevnotes\/isoptional\/wrapped","role":"symbol","title":"Wrapped","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Wrapped"}],"kind":"symbol","type":"topic"}}}