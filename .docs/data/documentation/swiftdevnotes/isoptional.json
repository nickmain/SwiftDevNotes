{"metadata":{"title":"IsOptional","symbolKind":"protocol","externalID":"s:13SwiftDevNotes10IsOptionalP","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"IsOptional","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"IsOptional","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"SwiftDevNotes"}]},"seeAlsoSections":[{"identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods","doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/NonCopyable"],"title":"Swift Type System","generated":true}],"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped"]},{"title":"Instance Properties","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP"],"title":"Inherits From","type":"inheritsFrom","kind":"relationships"},{"title":"Conforming Types","identifiers":["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional"],"type":"conformingTypes","kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IsOptional"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s23ExpressibleByNilLiteralP","kind":"typeIdentifier","text":"ExpressibleByNilLiteral"}],"platforms":["iOS"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Optional"},{"type":"text","text":" cannot be directly used as a where-constraint but this can"},{"type":"text","text":" "},{"text":"be achieved by conforming it to ","type":"text"},{"type":"codeVoice","code":"IsOptional"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This protocol also allows “casting” the wrapped value to an optional"},{"type":"text","text":" "},{"text":"type so that it can be unwrapped.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public protocol IsOptional: ExpressibleByNilLiteral {","    associatedtype Wrapped","","    \/\/ Get the value as an optional type","    var asOptional: Wrapped? { get }","}","","extension Optional: IsOptional {","    public var asOptional: Wrapped? { self }","}","","protocol Foo {","    associatedtype Bar","","    var value: Bar { get }","    var message: String { get }","}","","extension Foo {","    var message: String { \"NOT OPTIONAL \\(value)\" }","}","","extension Foo where Bar: IsOptional {","    var message: String {","        \/\/ need to cast value to optional type","        if let value = value.asOptional {","            \"IS OPTIONAL \\(value)\"","        } else {","            \"IS OPTIONAL nil\"","        }","    }","}"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftdevnotes\/isoptional"]}],"hierarchy":{"paths":[["doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes"]]},"abstract":[{"type":"text","text":"Allow “where” clauses to specify that a type is Optional."}],"references":{"doc://SwiftDevNotes/documentation/SwiftDevNotes/Swift/Optional":{"title":"Optional","url":"\/documentation\/swiftdevnotes\/swift\/optional","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"role":"symbol","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/Swift\/Optional","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Optional","preciseIdentifier":"s:Sq"}],"abstract":[],"kind":"symbol","type":"topic"},"https://github.com/apple/swift-evolution/blob/main/proposals/0390-noncopyable-structs-and-enums.md":{"type":"link","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md","titleInlineContent":[{"text":"0390-noncopyable-structs-and-enums","type":"text"}],"title":"0390-noncopyable-structs-and-enums","url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md"},"doc://SwiftDevNotes/documentation/SwiftDevNotes":{"kind":"symbol","title":"SwiftDevNotes","type":"topic","url":"\/documentation\/swiftdevnotes","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes","role":"collection","abstract":[{"text":"An ongoing collection of notes and example code for interesting and obscure features","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the Swift programming language and the SwiftUI framework."}]},"doc://SwiftDevNotes/documentation/SwiftDevNotes/ProtocolWithOptionalMethods":{"kind":"symbol","navigatorTitle":[{"text":"ProtocolWithOptionalMethods","kind":"identifier"}],"title":"ProtocolWithOptionalMethods","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/ProtocolWithOptionalMethods","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ProtocolWithOptionalMethods"}],"abstract":[{"type":"text","text":"Optional methods in protocols can be simulated by providing an unconstrained default"},{"type":"text","text":" "},{"type":"text","text":"implementation in an extension."}],"url":"\/documentation\/swiftdevnotes\/protocolwithoptionalmethods","role":"symbol","type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IsOptional"}],"title":"IsOptional","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsOptional"}],"abstract":[{"type":"text","text":"Allow “where” clauses to specify that a type is Optional."}],"url":"\/documentation\/swiftdevnotes\/isoptional","role":"symbol","type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/asOptional":{"type":"topic","kind":"symbol","title":"asOptional","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"asOptional","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:13SwiftDevNotes10IsOptionalP7WrappedQa","text":"Wrapped"},{"text":"?","kind":"text"}],"required":true,"url":"\/documentation\/swiftdevnotes\/isoptional\/asoptional","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/asOptional","role":"symbol","abstract":[{"text":"Get the value as an optional type","type":"text"}]},"doc://SwiftDevNotes/documentation/SwiftDevNotes/NonCopyable":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NonCopyable"}],"title":"NonCopyable","identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/NonCopyable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonCopyable"}],"abstract":[{"type":"text","text":"See "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0390-noncopyable-structs-and-enums.md","isActive":true}],"url":"\/documentation\/swiftdevnotes\/noncopyable","role":"symbol","type":"topic"},"doc://SwiftDevNotes/documentation/SwiftDevNotes/IsOptional/Wrapped":{"identifier":"doc:\/\/SwiftDevNotes\/documentation\/SwiftDevNotes\/IsOptional\/Wrapped","required":true,"role":"symbol","abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/swiftdevnotes\/isoptional\/wrapped","title":"Wrapped","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"identifier"}]},"doc://SwiftDevNotes/s23ExpressibleByNilLiteralP":{"title":"Swift.ExpressibleByNilLiteral","identifier":"doc:\/\/SwiftDevNotes\/s23ExpressibleByNilLiteralP","type":"unresolvable"}}}